
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <%= stylesheet_link_tag 'application', media: 'all' %>
    <%= javascript_include_tag "application" %>
    <script src="http://maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
    <script src='http://cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js' type='text/javascript'></script>
    <script src='http://cdn.rawgit.com/googlemaps/js-rich-marker/gh-pages/src/richmarker-compiled.js' type='text/javascript'></script>
    <script src='http://cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script>
  </head>
  <body>
    <div>
      <div class='index-map' id='multi_markers'> </div>
    </div>

    <script type="text/javascript">
      handler = Gmaps.build('Google');

      handler.buildMap({ provider: {}, internal: {id: 'multi_markers'}}, function(){
        markers = handler.addMarkers(<%= raw @json_fpas.to_json %>);
        var centerpoint = new google.maps.LatLng(42.339169, -71.088474);

        if(navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(displayOnMap)
        };

        handler.map.centerOn(centerpoint)
        handler.bounds.extendWith(markers);
        handler.getMap().setZoom(12);
      });

      var map = handler.getMap();

      google.maps.event.addListener(map, 'mousedown', function(event){
        var pressedLocationInfowindow=new google.maps.InfoWindow({
          content: '<button onclick=addPressedLocation()>Add Parking Area</button>'
        });

        var counter=setTimeout(timer, 2200);
        var latLng=event.latLng;

        google.maps.event.addListener(map, 'mouseup', function(){
          clearTimeout(counter)
        });

        function timer(){
          if (gon.new_parking_area.length == 0){
            var marker = new google.maps.Marker({
              position: latLng,
              map: map,
              icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=|C3BDBD|000000"
            });

              gon.new_parking_area.push(marker);
              pressedLocationInfowindow.open(map, marker);

              google.maps.event.addListener(pressedLocationInfowindow,'closeclick',function(){
                if(gon.new_parking_area.length > 0){
                  gon.new_parking_area[0].setMap(null);
                  gon.new_parking_area.pop();
                }
              });
      } else {
        gon.new_parking_area[0].setPosition(latLng);
          }
        }
      });

      function displayOnMap(position){
        var currentLocationInfowindow=new google.maps.InfoWindow({
          content: '<button onclick=addCurrentLocation()>Add Parking Area</button>'
        });

        var marker = handler.addMarker({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
        gon.current_location.push(marker)

        google.maps.event.addListener(marker.getServiceObject(), 'click', function(object){
          currentLocationInfowindow.open(map, marker.getServiceObject());
        });
      };

      function addPressedLocation(){
        $.ajax({
            type : "POST",
            url : "/free_parking_areas/redirect_to_new_from_map.js",
            dataType: 'script',
            data : { lat: gon.new_parking_area[0].position.lat(), lng: gon.new_parking_area[0].position.lng() }
        });
        return false;
      }

      function addCurrentLocation(){
        $.ajax({
            type : "POST",
            url : "/free_parking_areas/redirect_to_new_from_map.js",
            dataType: 'script',
            data : { lat: gon.current_location[0].getServiceObject().position.lat(), lng: gon.current_location[0].getServiceObject().position.lng() }
        });
        return false;
      }

      function calcRoute(destinationLat, destinationLng) {
        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer({suppressMarkers:true});

        directionsDisplay.setMap(handler.getMap())
        if(gon.current_location.length > 0) {
           var destination = new google.maps.LatLng(destinationLat, destinationLng);

           var request = {
               origin: gon.current_location[0].getServiceObject().position,
               destination: destination,
               travelMode:  google.maps.DirectionsTravelMode.DRIVING
           };
           directionsService.route(request, function(response, status) {
             if (status == google.maps.DirectionsStatus.OK) {
               directionsDisplay.setDirections(response);
             };
           });
          } else {
            alert("You must have location enabled for directions")
          };
        };

        function gmaps4rails_callback() {
          function closeInfowindows(){
            if(gon.new_parking_area.length > 0){
              debugger;
              gon.new_parking_area[0].setMap(null);
              gon.new_parking_area.pop();
            }
          }

          for (var i = 0; i <  Gmaps4Rails.markers.length; ++i) {
            debugger;

            google.maps.event.addListener(Gmaps4Rails.markers[i].google_object, 'click', closeInfowindows());
          }
        }
     </script>
  </body>
</html>
